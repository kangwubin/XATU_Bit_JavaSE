1.（1）java中基本数据类型：int  long  short  byte  char  boolean  float  double
  （2）Java中引用数据类型：数组、String、类
2.类的成员可以包含：字段、方法、代码块、内部类、接口
3.（1）new 关键字用于创建一个对象的实例.
  （2）使用 . 来访问对象中的属性和方法.
  （3）同一个类可以创建多个实例.
3.1.Java中：对于一个对象的字段如果没有显式设置初始值, 那么会被设置一个默认的初值
  （1）对于各种数字类型, 默认值为 0.
  （2）对于 boolean 类型, 默认值为 false.
  （3）对于引用类型(String, Array, 以及自定制类), 默认值为 null。
  （4）null 在 Java 中为 "空引用", 表示一个无效的对象. 类似于 C 语言中的空指针. 如果对 null 进行 . 操作就会引发异常
3.2.方法 (method)：用于描述一个对象的行为.
4.类中存在一个特殊方法：构造方法
 （1）构造方法的名字和类名完全相同，用于对象的初始化.
 （2）构造方法没有返回值
 （3）构造方法new对象的同时被自动调用
 （4）构造方法是可以传参数的，传参数的过程和普通方法一样
 （5）构造方法也能支持重载，重载的规则和普通方法一样
4.1.构造方法的基本语法：
  （1）构造方法是一种特殊方法, 使用关键字new实例化新对象时会被自动调用, 用于完成初始化操作。
  （2）new 执行过程：为对象分配内存空间，调用对象的构造方法。
  语法规则：
  （1）方法名称必须与类名称相同
  （2）构造方法没有返回值类型声明
  （3）每一个类中一定至少存在一个构造方法（没有明确定义，则系统自动生成一个无参构造）
  注意事项：
  （1）如果类中没有提供任何的构造函数，那么编译器会默认生成一个不带有参数的构造函数
  （2）若类中定义了构造方法，则默认的无参构造将不再生成.
  （3）构造方法支持重载. 规则和普通方法的重载一致.
5.this在java中是一个关键字，在类的内部表示当前这个对象的引用
6.（1）字段初始化的方法：
   1. 就地初始化
   2. 使用构造方法初始化
   3. 使用代码块初始化：代码块（{}）功能和构造方法很类似，也是可以用来初始化
  （2）代码块：普通代码块、构造块、静态块
   1.普通代码块：定义在方法中的代码块.
     public class Main{
     public static void main(String[] args) {
     { //直接使用{}定义，普通方法块
     int x = 10 ;
     System.out.println("x1 = " +x);
     }
     int x = 100 ;
     System.out.println("x2 = " +x);
     }
     }
   2.构造代码块：定义在类中的代码块(不加修饰符)。也叫实例代码块。构造代码块一般用于初始化实例成员变量。
    //实例代码块：
    {
    this.name = "bit";
    this.age = 12;
    this.sex = "man";
    System.out.println("I am instance init()!");
    }
    注意事项: 实例代码块优先于构造函数执行。
   3.静态代码块：使用static定义的代码块。一般用于初始化静态成员属性。
    //静态代码块
    static {
    count = 10;//只能访问静态数据成员
    System.out.println("I am static init()!");
    }
   2.构造方法可以传参数，并且支持重载
   3.代码块的参数的值是固定的